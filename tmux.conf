set-window-option -g mode-keys vi

#set -g status-right ‘#[fg=yellow]#(uptime | cut -d “,” -f 2-)’

#--Status-Bar-------------------------------------------------------------------
# Default colors
set -g status-bg black
set -g status-fg white

# Left side of status bar
set -g status-left-length 35
set -g status-left '#[fg=green][#[bg=black,fg=cyan]#S#[fg=green]][#[fg=blue]%Y-%m-%d #[fg=white]%H:%M#[fg=green]]'

# Inactive windows in status bar
set-window-option -g window-status-format '#[fg=cyan,dim]#I#[fg=blue]: #[default]#W#[fg=grey,dim]#F'

# Current or active window in status bar
#set-window-option -g window-status-current-format '#[bg=blue,fg=cyan,bold]#I#[bg=blue,fg=cyan]: #[fg=white]#W #[fg=dim]'
set-window-option -g window-status-current-format '#[fg=white,bg=red,bold]#I: #W #[fg=dim]'

set-option -g pane-active-border-fg colour227
set-option -g pane-active-border-bg default

# Alerted window in status bar. Windows which have an alert (bell, activity or content).
# set-window-option -g window-status-alert-fg red
# set-window-option -g window-status-alert-bg white

# Right side of status bar
#set -g status-right '#[fg=yellow]#(date)'
set -g status-right '#[fg=green][#[fg=white]#T#[fg=green]]'

set-option -g default-command "reattach-to-user-namespace -l bash"

# $Id: screen-keys.conf,v 1.7 2010/07/31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c
unbind ^C
bind ^C new-window -c "#{pane_current_path}"
unbind c
bind c new-window -c "#{pane_current_path}"

# detach ^D d
unbind ^D
bind ^D detach

# displays *
unbind *
bind * list-clients

# next ^@ ^N sp n
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^?
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# split -v |
unbind |
bind | split-window -h -c "#{pane_current_path}"

# split -h -
unbind -
bind - split-window -v -c "#{pane_current_path}"

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# " windowlist -b
unbind '"'
bind '"' choose-window

#clipboard <-> buffer
unbind C-c
bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
unbind C-v
bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R

# copy-mode select & copy
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe  "reattach-to-user-namespace pbcopy"
